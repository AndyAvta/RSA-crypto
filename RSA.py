from random import randint

def coder_key_open(message,key_2,key_1): # функция кодирования RSA методом при помощи открытого ключа уже существующего
    """ Функция кодирования RSA методом
    получаемые функцией данные: Сообщение для кодировки, первая и вторая часть открытого ключа шифрования
    в созданный массив добавляются данные обработки шифрования каждого символа(переведённого в цифровое значение по UTF-8)
    выводит массив данных с только цифровыми занчениями
    """
    ass=[]
    for i in range(0,len(message)):
        ass.append((((ord(message[i]))**key_1)%key_2))
    return ass

def decoder_key_sec(message,key_2,key_1): # функцмя раскодирования RSA методом при помощи секретного ключа уже существующего
    """ Функция раскодирования RSA методом
     получаемые функцией данные: Массив данных с цифрами(кодированного сообщения), первая и вторая чать секретного ключа для расшифровки даггых
     создаётся массив в которой вносятся посимвольные данные обработанных методом
     создаётся строка заполняеая раскодированными данными из массива
     выводи расшифрованное сообщение на экран
    """
    ass = []
    otv=""
    for i in range(0, len(message)):
        ass.append(chr(((int(message[i])) ** key_1) % key_2))
        otv+=ass[i]
    return otv

def key():
    """Функция создания ключей шифрования RSA методом
    Создаётся массив в который вносятся значения работы алгоритма по нахождению простых чисел
    Выбор случайным образом различных двух значений из массива с простыми числами
    Вычисление произведения для ключей этих двух значений(вторая часть открытого и секретного ключа)
    Вычисление функции Эйлера с входными двумя значениями полученных выше
    Процесс создания алгоритмом первой части открытого ключа
    Процесс содания алгоритмом первой части секреткного ключа
    Вывод открытого ключа
    Вывод секретного ключа
    """
    print("Происходит создание ключей для нового сообщения")
    lst = [2]
    for i in range(3, 100, 2): #Создание алгоритма для нахождения простых чисел
        if (i > 10) and (i % 10 == 5):
            continue
        for j in lst:
            if j * j - 1 > i:
                lst.append(i)
                break
            if (i % j == 0):
                break
        else:
            lst.append(i)
    # for i in range(11):#Удаление первых 11 элементов списка с простыми числами для упрощения работы программы и повышения качества ключей для шифрования
    #     lst.pop(0)
    while True: #Выбор случайных простых чисел в списке простых чисел
        p=lst[randint(0,len(lst)-1)]
        q=lst[randint(0,len(lst)-1)]
        if p==q:
            pass
        else:
            break
    n=p*q#Модуль произведения(требуемое вычисление для открытого ключа и секретного)
    F=(p-1)*(q-1) #Вычисление функции Эйлера
    try:
        lst_2=[]
        for i in range(0,len(lst)):
            if lst[i]<F and lst[i]%F!=0:
                lst_2.append(lst[i])
        e=lst_2[randint(0,len(lst_2))]
    except IndexError:
        key()

    d=0
    for i in range(0, 100000):
        if (i * e) % F == 1 and i != e:
            d=i
            break
    if d == 0:
        key()

    print(e,n,"открытй ключ")
    print(d,n,"Секретнвй ключ ")
""" Начало программы
Запускается цикл с целью в случае не выполнения условия или ошибки, не перезапускать программу, а повторить ввод программных значений
Создаётся значение для ввода  команд
(Выход(завершение работы программы программы),
Создать ключ(запуск функции def key():), 
Шифрование(запуск функции coder_key_open), 
Расшифрование(запуск функции decoder_key_sec(message,key_2,key_1)))

При вводе команды "Выход", заврешение работы программы

При вводе команды "Создать ключ",запуск функции  def key():. Вывод сообщения с открытым и секретным ключом

При вводе команды "Шифрования" создание трёх входящих переменных
(сообщение для кодировки сообщение RSA методом, 
певая часть открытого ключа, 
вторая чать открытого ключа) 
Вывод сообщения с зашифрованным сообщением RSA методом в виде списка с циферными значениями

При вводе командв "Расшифрование" создание трёх входящих еременных
(список закодированного сообщения сообщение RSA методом, 
певая часть секретного ключа, 
вторая чать секретного ключа) 
Вывод расшифрованного сообщения RSA методом в виде строки

"""
while True: # Начало программы
    print("Выберите из перечня требуемое действие и введите его:Выход,Создать ключ, Шифрование или Расшифрование")
    intu=input()
    if intu=="Выход" or intu=="выход":
        exit()
    elif intu == "Создать ключ" or intu=="создать ключ":
        print(key())
    elif intu == "Шифрование" or intu=="шифрование":
        message = input("Введите сообщение которое необходимо закодировать")
        key_1 = int(input("Введите первую часть открытого ключа"))
        key_2 = int(input("Введите вторую часть открытого ключа"))
        print(coder_key_open(message,key_2,key_1))
    elif intu == "Расшифрование"or intu=="расшифрование":
        message = input("Введите сообщение которое необходимо раскодировать").split(", ")
        key_1 = int(input("Введите первую часть секретного ключа"))
        key_2 = int(input("Введите вторую часть секретного ключа"))
        print(decoder_key_sec(message,key_2,key_1))
    else:
        print("Ошибка. Повторите ввод косанды")




